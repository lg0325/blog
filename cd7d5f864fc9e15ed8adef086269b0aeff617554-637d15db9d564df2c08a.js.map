{"version":3,"file":"cd7d5f864fc9e15ed8adef086269b0aeff617554-637d15db9d564df2c08a.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./node_modules/camelcase/index.js","webpack://gatsby-starter-blog/../src/image-utils.ts","webpack://gatsby-starter-blog/../src/components/hooks.ts","webpack://gatsby-starter-blog/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-blog/../src/components/picture.tsx","webpack://gatsby-starter-blog/../src/components/placeholder.tsx","webpack://gatsby-starter-blog/../src/components/main-image.tsx","webpack://gatsby-starter-blog/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-blog/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-blog/../src/components/static-image.server.tsx","webpack://gatsby-starter-blog/../src/components/static-image.tsx","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social = data.site.siteMetadata?.social\r\n\r\n  return (\r\n    <div className=\"bio\">\r\n      <StaticImage\r\n        className=\"bio-avatar\"\r\n        layout=\"fixed\"\r\n        formats={[\"auto\", \"webp\", \"avif\"]}\r\n        src=\"../images/gatsby-icon.png\"\r\n        width={50}\r\n        height={50}\r\n        quality={95}\r\n        alt=\"Profile picture\"\r\n      />\r\n      {author?.name && (\r\n        <p>\r\n          Written by <strong>{author.name}</strong> {author?.summary || null}\r\n          {` `}\r\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\r\n            You should follow them on Twitter\r\n          </a>\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        © {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={site.siteMetadata?.social?.twitter || ``}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n"],"names":["DEFAULT_PIXEL_DENSITIES","DEFAULT_BREAKPOINTS","DEFAULT_FIXED_WIDTH","DEFAULT_ASPECT_RATIO","warn","message","console","sortNumeric","a","b","getSizes","width","layout","images","map","image","src","join","formatFromFilename","filename","dot","lastIndexOf","ext","slice","length","setDefaultDimensions","args","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","_extends","Math","round","generateImageSource","fit","options","_generateImageSource","generateImageData","pluginName","reporter","backgroundColor","placeholderURL","Set","size","has","delete","add","imageSizes","imgDimensions","Object","entries","filter","_","erroneousUserDimensions","dim","outputPixelDensities","dedupeAndSortDensities","calculated","getDimensionsAndAspectRatio","originalWidth","fixedDimension","sizes","densities","density","presentationWidth","presentationHeight","unscaledWidth","fixedImageSizes","responsiveImageSizes","calculateImageSizes","result","sources","forEach","imageSrc","Boolean","find","img","unscaled","fallback","srcSet","getSrcSet","_result$sources","push","type","imageProps","placeholder","values","Array","from","sort","min","DEFAULT_FLUID_WIDTH","includes","dimensions","imageAspectRatio","widthOption","Number","MAX_SAFE_INTEGER","heightOption","max","hasNativeLazyLoadSupport","HTMLImageElement","prototype","gatsbyImageIsInstalled","GATSBY___IMAGE","node","_node$images$fallback","gatsbyImageData","gatsbyImage","_node$childImageSharp","childImageSharp","getSrc","getImage","_getImage$images","_getImage","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","wrapperStyle","className","position","overflow","display","verticalAlign","style","getImageData","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","_objectWithoutPropertiesLoose","EVERY_BREAKPOINT","getMainProps","isLoading","isLoaded","loading","left","top","transform","transition","willChange","shouldLoad","opacity","getPlaceholderProps","objectFit","objectPosition","bottom","right","withArtDirection","defaultImage","artDirected","output","_excluded2","media","process","env","NODE_ENV","source","_output$placeholder","Sizer","React","createElement","paddingTop","maxWidth","alt","role","LayoutWrapper","_ref","children","Fragment","Image","decoding","undefined","Picture","_ref2","key","fallbackImage","propTypes","PropTypes","string","isRequired","bool","displayName","exact","arrayOf","oneOfType","Placeholder","_Picture$propTypes","propName","componentName","Error","MainImage","removeNewLines","str","replace","altValidator","rest","object","_excluded","renderImageToStringPromise","renderImage","GatsbyImageHydrator","as","class","preactClass","onStartLoad","onLoad","onError","getWrapperProps","wStyle","wClass","wrapperProps","root","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","cacheKey","animationFrame","cleanupCallback","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","_getStaticImage","StaticImage","__imageData","imageData","__error","imgClassName","imgStyle","placeholderBackgroundColor","cleanedImages","checkDimensionProps","number","validLayouts","GatsbyImageBrowser","useStaticQuery","Bio","data","author","site","siteMetadata","social","name","summary","twitter","Link","Layout","location","title","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","Date","getFullYear","Seo","description","metaDescription","defaultTitle"],"sourceRoot":""}